#include "key.h"
#include "delay.h" 
#include "menu.h"
#include "led.h"
//#include "oled.h"


//////////////////////////////////////////////////////////////////////////////////	 
//CH445按键中断函数
//处理相应按键的功能								  
////////////////////////////////////////////////////////////////////////////////// 

u8 value=0;
u8 key_num =0;   //按键键值
extern u8 start_bit                  ;//启动位,start_bit=1,mode启动；start_bit=0,mode关闭;
extern struct Menu *menuP ;
extern struct Menu Manual_mode[5]          ;//手动模式设置菜单
extern struct Menu Intelligent_mode[6]     ;//智能模式设置菜单
extern struct Menu Set_Time1[2];
extern struct Menu Set_Date1[2];
extern struct Menu Set_Week1[2];
extern struct Menu Set_AlarmA1[2];
extern struct Menu Observed_Value1[5];
extern struct Menu Set_Time2[2];
extern struct Menu Set_Date2[2];
extern struct Menu Set_Week2[2];
extern struct Menu Set_AlarmA2[2];
extern struct Menu Observed_Value2[5];

u8 key_num;
	


//按键初始化函数
void KEY_Init(void)
{
	
	GPIO_InitTypeDef  GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);//使能GPIOA,GPIOE时钟
 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5; //S4对应引脚
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;//普通输入模式
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100M
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;//上拉
  GPIO_Init(GPIOD, &GPIO_InitStructure);//初始化GPIOE2,3,4
	
 
} 
//外部中断初始化程序
//初始化PE2~4,PA0为中断输入.
void EXTIX_Init(void)
{
	NVIC_InitTypeDef   NVIC_InitStructure;
	EXTI_InitTypeDef   EXTI_InitStructure;
	
	KEY_Init(); //按键对应的IO口初始化
 
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);//使能SYSCFG时钟
	
 
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource2);//PD2 连接到中断线2
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource3);//PD3 连接到中断线3
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource4);//PD4 连接到中断线4
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource5);//PD5 连接到中断线5
	

	
	/* 配置EXTI_Line2,3,4,5*/
	EXTI_InitStructure.EXTI_Line =EXTI_Line2 | EXTI_Line3 | EXTI_Line4 | EXTI_Line5;
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;//中断事件
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //下降沿触发
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;//中断线使能
  EXTI_Init(&EXTI_InitStructure);//配置
 

	
	NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;//外部中断2
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//抢占优先级3
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;//子优先级2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//使能外部中断通道
  NVIC_Init(&NVIC_InitStructure);//配置
	
	
	NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;//外部中断3
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//抢占优先级2
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;//子优先级2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//使能外部中断通道
  NVIC_Init(&NVIC_InitStructure);//配置
	
	
	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;//外部中断4
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//抢占优先级1
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;//子优先级2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//使能外部中断通道
  NVIC_Init(&NVIC_InitStructure);//配置
	   
	NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn ;//外部中断4
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//抢占优先级1
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;//子优先级2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//使能外部中断通道
  NVIC_Init(&NVIC_InitStructure);//配置
	   
}


//外部中断3服务程序 S1  ON/OFF/BACK
void EXTI2_IRQHandler(void)
{
	delay_ms(1000);	//消抖
	if(S1==0)       
	{
		key_num=1;
	}
	EXTI_ClearITPendingBit(EXTI_Line2);//清除LINE4上的中断标志位  
}

//外部中断4服务程序 S2  ENTER
void EXTI3_IRQHandler(void)
{
	delay_ms(100);	//消抖
	if(S2==0) 
	{
		key_num=2;
	}

	EXTI_ClearITPendingBit(EXTI_Line3);//清除LINE4上的中断标志位  
}


u8 cursor_position ;
//外部中断0服务程序 S3  UP/ADD
void EXTI4_IRQHandler(void)
{
	delay_ms(100);	//消抖
	if(S3==0) 
	{
	  key_num=3;
	}
	EXTI_ClearITPendingBit(EXTI_Line4);//清除LINE4上的中断标志位  
}


//外部中断1服务程序 S4  DOWN/REDUCE
void EXTI9_5_IRQHandler(void)
{
	delay_ms(100);	//消抖
	if(S4==0)
	{
	   key_num=4;
	}
	EXTI_ClearITPendingBit(EXTI_Line5 );//清除LINE4上的中断标志位  
}

void Num_Add(void) 
{
	RTC_TimeTypeDef RTC_Time;
	RTC_DateTypeDef RTC_Date;
	RTC_GetTime(RTC_Format_BIN, &RTC_Time);
	RTC_GetDate(RTC_Format_BIN, &RTC_Date);
	if(menuP == &Set_Time1[0] || menuP == &Set_Time2[0])
	{
		switch(menuP->start_bit)
	  {
		  case 1:
		  {
				value=RTC_Time.RTC_Hours;
				value++;
				if(value>=24)
				{
					value=0;
				}
		  	Set_Time(value);	
			  break;
		  }
		  case 2:
		  {
		  	value=RTC_Time.RTC_Minutes;
				value++;
				if(value>59)
				{
					value=59;
				}
		  	Set_Time(value);	
			  break;
	  	}
		  case 3:
		  {
		  	value=RTC_Time.RTC_Seconds;
				value++;
				if(value>=59)
				{
					value=59;
				}
		  	Set_Time(value);	
		  	break;
	  	}
		  default:
		  	break;
   	}
	}
	else if(menuP == &Set_Date1[0] || menuP == &Set_Date2[0])
	{
		switch(menuP->start_bit)
	  {
		  case 1:
		  {
				value=RTC_Date.RTC_Year;
				value++;
				if(value>=100)
				{
					value=1;
				}
		  	Set_Date(value);	
			  break;
		  }
		  case 2:
		  {
		  	value=RTC_Date.RTC_Month;
				value++;
				if(value>12)
				{
					value=1;
				}
		  	Set_Date(value);	
			  break;
	  	}
		  case 3:
		  {
		  	value=RTC_Date.RTC_Date;
				value++;
				if(value>31)
				{
					value=1;
				}
		  	Set_Date(value);	
			  break;
	  	}
		  default:
		  	break;
   	}
	}
	else if(menuP == &Set_Week1[0] || menuP == &Set_Week2[0])
	{
		value=RTC_Date.RTC_WeekDay;
		value++;
		if(value>=7)
		{
			value=7;
		}
		Set_Week(value);	
	}
	else if(menuP == &Set_AlarmA1[0] || menuP == &Set_AlarmA2[0])
	{
		switch(menuP->start_bit)
	  {
		  case 1:
		  {
				value++;
				if(value>=1)
				{
					value=7;
				}
		  	Set_AlarmA(value);	
			  break;
		  }
		  case 2:
		  {
		  	value++;
				if(value>=24)
				{
					value=0;
				}
		  	Set_AlarmA(value);	
			  break;
	  	}
		  case 3:
		  {
		  	value++;
				if(value>=59)
				{
					value=59;
				}
		  	Set_AlarmA(value);	
			  break;
	  	}
			case 4:
		  {
		  	value++;
				if(value>=59)
				{
					value=59;
				}
		  	Set_AlarmA(value);	
			  break;
	  	}
		  default:
		  	break;
   	}
	}
}



void Num_Subtract(void)     
{
	RTC_TimeTypeDef RTC_Time;
	RTC_DateTypeDef RTC_Date;
	RTC_GetTime(RTC_Format_BIN, &RTC_Time);
	RTC_GetDate(RTC_Format_BIN, &RTC_Date);
	if(menuP == &Set_Time1[0] || menuP == &Set_Time2[0])
	{
		switch(menuP->start_bit)
	  {
		  case 1:
		  {
				value=RTC_Time.RTC_Hours;
				value--;
				if(value<=0)
				{
					value=0;
				}
		  	Set_Time(value);	
			  break;
		  }
		  case 2:
		  {
		  	value=RTC_Time.RTC_Minutes;
				value--;
				if(value<=0)
				{
					value=0;
				}
		  	Set_Time(value);	
			  break;
	  	}
		  case 3:
		  {
		  	value=RTC_Time.RTC_Seconds;
				value--;
				if(value<=0)
				{
					value=0;
				}
		  	Set_Time(value);	
		  	break;
	  	}
		  default:
		  	break;
   	}
	}
	else if(menuP == &Set_Date1[0] || menuP == &Set_Date2[0])
	{
		switch(menuP->start_bit)
	  {
		  case 1:
		  {
				value=RTC_Date.RTC_Year;
				value--;
				if(value<=0)
				{
					value=0;
				}
		  	Set_Date(value);	
			  break;
		  }
		  case 2:
		  {
		  	value=RTC_Date.RTC_Month;
				value--;
				if(value<=1)
				{
					value=1;
				}
		  	Set_Date(value);	
			  break;
	  	}
		  case 3:
		  {
		  	value=RTC_Date.RTC_Date;
				value--;
				if(value<=1)
				{
					value=1;
				}
		  	Set_Date(value);	
			  break;
	  	}
		  default:
		  	break;
   	}
	}
	else if(menuP == &Set_Week1[0] || menuP == &Set_Week2[0])
	{
		value=RTC_Date.RTC_WeekDay;
		value--;
		if(value<=1)
		{
			value=1;
		}
		Set_Week(value);	
	}
	else if(menuP == &Set_AlarmA1[0] || menuP == &Set_AlarmA2[0])
	{
		switch(menuP->start_bit)
	  {
		  case 1:
		  {
				value--;
				if(value<=1)
				{
					value=1;
				}
		  	Set_AlarmA(value);	
			  break;
		  }
		  case 2:
		  {
		  	value--;
				if(value<=0)
				{
					value=0;
				}
		  	Set_AlarmA(value);	
			  break;
	  	}
		  case 3:
		  {
		  	value--;
				if(value<=0)
				{
					value=0;
				}
		  	Set_AlarmA(value);	
			  break;
	  	}
			case 4:
		  {
		  	value--;
				if(value<=0)
				{
					value=0;
				}
		  	Set_AlarmA(value);	
			  break;
	  	}
		  default:
		  	break;
   	}
	}
}

void KEY_ENTER(void)      
{
	switch(menuP->menu_level)
	{
		case 1:
		{
			if(menuP==&Manual_mode[0])
		  {
		  	menuP=&Intelligent_mode[0];
		  }
		  else if(menuP==&Intelligent_mode[4])
		  {
		  	menuP=&Manual_mode[0];
		  }
		  else if(menuP==&Intelligent_mode[0])
		  {
		  	menuP->start_bit++;
		  	if(menuP->start_bit>3)
		  	{
		  		menuP->start_bit=0 ;
		  	}
		  }
		  break;
		}
		
	}
} 

void KEY_UP(void)  
{
	if(menuP->start_bit==0 && menuP != &Intelligent_mode[0])
	{
		if(menuP->item>0 && menuP->item <= menuP->menu_num)
		{
			menuP->item = menuP->item-1;
		}
		else
		{
			menuP->item=menuP->item;
		}
	}
	else if(menuP->start_bit !=0)
	{
		if(menuP->menu_level==3)
		{	  
			  Num_Add();
	  }
	}
}	

void KEY_DOWN(void) 
{
	if(menuP->start_bit==0 && menuP != &Intelligent_mode[0])
	{
		if(menuP->item>0 && menuP->item <= menuP->menu_num)
		{
			menuP->item = menuP->item+1;
		}
		else
		{
			menuP->item=menuP->item;
		}
	}
	else if(menuP->start_bit !=0)
	{
		if(menuP->menu_level==3)
		{	  
			  Num_Subtract();
	  }
	}
}	


